// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProcessManager.App.Wpf.Core.Data;

#nullable disable

namespace ProcessManager.App.Wpf.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240517161934_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Dictionaries.DataDictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemsValueTypes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dictionaries");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Dictionaries.DictionaryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DictionaryId")
                        .HasColumnType("int");

                    b.Property<int>("DictionaryItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryId");

                    b.ToTable("DictionaryItems");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Documents.DocumentTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTemplates");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Users.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Users.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermisssions");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.UserWorkflows.UserWorkflowData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CompletedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentStageId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompletedByUserId");

                    b.HasIndex("CurrentStageId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("UserWorkflows");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.UserWorkflows.UserWorkflowStageFieldValueData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FieldCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserWorkflowDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserWorkflowDataId");

                    b.ToTable("UserWorkflowFieldValues");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CodeMask")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTemplateId");

                    b.HasIndex("FormId");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkflowForm");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowFormField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("WorkflowFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowFormId");

                    b.ToTable("WorkflowFormField");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AssigneeId")
                        .HasColumnType("int");

                    b.Property<int>("AssigneeType")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowStages");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowStageFieldConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FieldCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("WorkflowStageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowStageId");

                    b.ToTable("WorkflowStageFieldConfigurations");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowUserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowUserGroups");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.Property<int>("UserGroupsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("UserGroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserUserGroup");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Dictionaries.DictionaryItem", b =>
                {
                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Dictionaries.DataDictionary", "Dictionary")
                        .WithMany("DictionaryItems")
                        .HasForeignKey("DictionaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dictionary");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Users.UserPermission", b =>
                {
                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Users.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.UserWorkflows.UserWorkflowData", b =>
                {
                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Users.User", "CompletedByUser")
                        .WithMany()
                        .HasForeignKey("CompletedByUserId");

                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowStage", "CurrentStage")
                        .WithMany()
                        .HasForeignKey("CurrentStageId");

                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Workflows.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompletedByUser");

                    b.Navigation("CurrentStage");

                    b.Navigation("User");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.UserWorkflows.UserWorkflowStageFieldValueData", b =>
                {
                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.UserWorkflows.UserWorkflowData", "UserWorkflowData")
                        .WithMany("FieldValues")
                        .HasForeignKey("UserWorkflowDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserWorkflowData");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.Workflow", b =>
                {
                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Documents.DocumentTemplate", "DocumentTemplate")
                        .WithMany()
                        .HasForeignKey("DocumentTemplateId");

                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowForm", "Form")
                        .WithMany()
                        .HasForeignKey("FormId");

                    b.Navigation("DocumentTemplate");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowFormField", b =>
                {
                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowForm", null)
                        .WithMany("Fields")
                        .HasForeignKey("WorkflowFormId");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowStage", b =>
                {
                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Workflows.Workflow", "Workflow")
                        .WithMany("Stages")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowStageFieldConfiguration", b =>
                {
                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowStage", "WorkflowStage")
                        .WithMany("Configurations")
                        .HasForeignKey("WorkflowStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowStage");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowUserGroup", b =>
                {
                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Users.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Workflows.Workflow", "Workflow")
                        .WithMany("CanCreateUserGroupsWorkflows")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserGroup");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Users.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcessManager.App.Wpf.Core.Settings.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Dictionaries.DataDictionary", b =>
                {
                    b.Navigation("DictionaryItems");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Users.User", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.UserWorkflows.UserWorkflowData", b =>
                {
                    b.Navigation("FieldValues");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.Workflow", b =>
                {
                    b.Navigation("CanCreateUserGroupsWorkflows");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowForm", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("ProcessManager.App.Wpf.Core.Settings.Workflows.WorkflowStage", b =>
                {
                    b.Navigation("Configurations");
                });
#pragma warning restore 612, 618
        }
    }
}
